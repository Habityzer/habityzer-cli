# Habityzer CLI - Cursor Integration Rules

## 🎯 Task Management Integration

When the user asks about tasks, todos, or project management, automatically use the Habityzer CLI to fetch real-time data from their task management system.

### 📋 Task-Related Query Triggers
Respond with CLI commands when user asks about:
- "My tasks" / "Current tasks" / "Todo list"
- "What should I work on?" / "What's next?"
- "Task status" / "Progress updates"
- "Completed work" / "What did I finish?"
- "Show my tasks" / "List tasks"
- Any task management related queries

### 🔧 Available Habityzer CLI Commands

#### Viewing Tasks
```bash
npx habityzer list           # Active tasks (Todo + In Progress) - DEFAULT
npx habityzer list all       # All tasks including completed
npx habityzer list done      # Completed tasks only
npx habityzer list todo      # Todo tasks only
npx habityzer list ideas     # Ideas only
npx habityzer list progress  # In progress tasks only
```

#### Managing Tasks
```bash
npx habityzer create "Task title"                    # Create new task
npx habityzer create "Task title" "Description"      # Create with description
npx habityzer show <task-id>                         # Show task details
npx habityzer update <task-id> <field> <value>       # Update task
npx habityzer move <task-id> <status-id>             # Move task to status
npx habityzer delete <task-id>                       # Delete task
```

#### Project Information
```bash
npx habityzer projects       # List all projects
npx habityzer statuses       # List all task statuses
```

### 🎯 Default Behavior

**When user asks "What are my tasks?" or similar:**
1. Run `npx habityzer list` (shows active tasks by default)
2. Parse the CLI output
3. Present results in a clear, formatted way
4. Offer to show more details or other views if needed

### 💡 Response Format Guidelines

When presenting tasks:
- Show task ID, title, status, and priority
- Group by status or project when helpful
- Highlight urgent or high-priority items
- Offer actionable next steps
- Ask if they want to see completed tasks, create new tasks, etc.

### ⚙️ Setup Requirements

For projects using Habityzer CLI:
1. Install: `npm install habityzer-cli`
2. Configure environment variables in `.env`:
   ```
   HABITYZER_API_TOKEN=your_token_here
   HABITYZER_PROJECT_ID=2  # Optional, defaults to 2
   HABITYZER_API_BASE_URL=https://s.habityzer.com/api  # Optional
   ```
3. Test with: `npx habityzer list`

### 🔄 Integration Examples

**User**: "What are my current tasks?"
**AI Action**: Run `npx habityzer list`
**AI Response**: Parse and display active tasks with clear formatting

**User**: "What did I complete today?"
**AI Action**: Run `npx habityzer list done`
**AI Response**: Show completed tasks with completion timestamps

**User**: "Create a new task to fix the login bug"
**AI Action**: Run `npx habityzer create "Fix login bug"`
**AI Response**: Confirm task creation and show the new task details

### 📚 Additional Context

- Always fetch real-time data using the CLI
- Don't assume or make up task information
- If CLI fails, help troubleshoot configuration
- Suggest workflow improvements based on task patterns
- Integration works best in development environments with proper API access

### 🚀 Pro Tips for Users

- Use `npm run tasks` if you've added it to package.json scripts
- CLI supports both npx and direct node execution
- Works great with git hooks for commit-time task updates
- Perfect for standup meetings and progress tracking 